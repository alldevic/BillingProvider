// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do one of these:
//
//    using BillingProvider.Core.Models;
//
//    var listKkmResponse = ListKkmResponse.FromJson(jsonString);
//    var dataKktResponse = DataKktResponse.FromJson(jsonString);
//    var response = Response.FromJson(jsonString);

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace BillingProvider.Core.Models.Response
{
    public partial class Response
    {
        [JsonProperty("CheckNumber", Required = Required.Always)]
        public long CheckNumber { get; set; }

        [JsonProperty("SessionNumber", Required = Required.Always)]
        public long SessionNumber { get; set; }

        [JsonProperty("LineLength", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long? LineLength { get; set; }

        [JsonProperty("URL", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Url { get; set; }

        [JsonProperty("Info", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Info Info { get; set; }

        [JsonProperty("Command", Required = Required.Always)]
        public string Command { get; set; }

        [JsonProperty("Error", Required = Required.Always)]
        public string Error { get; set; }

        [JsonProperty("Status", Required = Required.Always)]
        public long Status { get; set; }

        [JsonProperty("QRCode", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string QrCode { get; set; }
    }

    public partial class Response
    {
        public static Response FromJson(string json) =>
            JsonConvert.DeserializeObject<Response>(json, BillingProvider.Core.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ListKkmResponse self) =>
            JsonConvert.SerializeObject(self, BillingProvider.Core.Models.Converter.Settings);

        public static string ToJson(this Response self) =>
            JsonConvert.SerializeObject(self, BillingProvider.Core.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter {DateTimeStyles = DateTimeStyles.AssumeUniversal}
            },
        };
    }
}